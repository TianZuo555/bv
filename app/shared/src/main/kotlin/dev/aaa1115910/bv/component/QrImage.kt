package dev.aaa1115910.bv.component

import android.graphics.BitmapFactory
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.ExperimentalMaterial3ExpressiveApi
import androidx.compose.material3.LoadingIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ImageBitmap
import androidx.compose.ui.graphics.ImageBitmapConfig
import androidx.compose.ui.graphics.Shape
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import dev.aaa1115910.bv.util.countDownTimer
import io.github.g0dkar.qrcode.QRCode
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream

@OptIn(ExperimentalMaterial3ExpressiveApi::class)
@Composable
fun QrImage(
    modifier: Modifier = Modifier,
    content: String,
    borderWidth: Dp = 24.dp,
    shape: Shape = MaterialTheme.shapes.large
) {
    val scope = rememberCoroutineScope()
    var qrImage by remember { mutableStateOf(ImageBitmap(1, 1, ImageBitmapConfig.Argb8888)) }
    var qrGenerated by remember { mutableStateOf(false) }
    var qrJob by remember { mutableStateOf<Job?>(null) }

    val createQr: suspend () -> Unit = {
        val output = ByteArrayOutputStream()
        QRCode(content).render().writeImage(output)
        val input = ByteArrayInputStream(output.toByteArray())
        val image = BitmapFactory.decodeStream(input).asImageBitmap()
        withContext(Dispatchers.Main) { qrImage = image }
        //delay(2000)
        qrGenerated = true
    }

    LaunchedEffect(content) {
        qrJob?.cancel()
        qrJob = scope.launch(Dispatchers.Default) {
            qrGenerated = false
            if (content.isNotBlank()) createQr()
        }
    }

    Box(
        modifier = modifier
            .clip(shape)
            .background(Color.White),
        contentAlignment = Alignment.Center,
    ) {
        if (qrGenerated) {
            Image(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(borderWidth),
                bitmap = qrImage,
                contentDescription = null
            )
        } else {
            LoadingIndicator(
                modifier = Modifier.fillMaxSize(0.5f)
            )
        }
    }
}

@Preview
@Composable
private fun QrImagePreview() {
    MaterialTheme {
        QrImage(
            modifier = Modifier.size(240.dp),
            content = "https://www.example.com"
        )
    }
}


@Preview
@Composable
private fun QrImageWithContentsPreview() {
    val contents = listOf("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
    var currentContent by remember { mutableStateOf("") }
    var index by remember { mutableIntStateOf(0) }

    LaunchedEffect(Unit) {
        countDownTimer(
            millisInFuture = 1000L * 10,
            countDownInterval = 1000L,
            tag = "",
            onTick = { _ ->
                currentContent = contents[index++]
                println("Current content: $currentContent")
            },
        )
    }

    MaterialTheme {
        Column {
            QrImage(
                modifier = Modifier.size(240.dp),
                content = currentContent
            )
        }
    }
}


@Preview
@Composable
private fun QrImageDifferentSizesPreview() {
    MaterialTheme {
        Column(
            modifier = Modifier.verticalScroll(rememberScrollState())
        ) {
            QrImage(
                modifier = Modifier.size(100.dp),
                content = "https://www.example.com",
                borderWidth = 16.dp
            )
            QrImage(
                modifier = Modifier.size(200.dp),
                content = "https://www.example.com"
            )
            QrImage(
                modifier = Modifier.size(300.dp),
                content = "https://www.example.com"
            )
            QrImage(
                modifier = Modifier.size(400.dp),
                content = "https://www.example.com"
            )
        }
    }
}
